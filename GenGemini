# Make by: Nguyễn Minh Tiến, 31231020122, Robot&Ai K49
# Cài đặt thư viện cần thiết
!pip install -q -U google-generativeai
!pip install -q matplotlib

import google.generativeai as genai
from PIL import Image
import io
import ipywidgets as widgets
from IPython.display import display, clear_output
import json
import re
import numpy as np

# --- Giao diện người dùng ---
api_key_input = widgets.Password(description='Nhập API Key:', placeholder='Dán API Key của bạn vào đây', layout=widgets.Layout(width='500px'))
uploader_id = widgets.FileUpload(description='1. Tải lên Giấy tờ', button_style='primary')
uploader_contract = widgets.FileUpload(description='2. Tải lên Hợp đồng', button_style='primary')

# Thêm các ô nhập tọa độ để cắt ảnh thủ công
coord_x = widgets.IntText(value=125, description='x:', layout=widgets.Layout(width='150px'))
coord_y = widgets.IntText(value=135, description='y:', layout=widgets.Layout(width='150px'))
coord_w = widgets.IntText(value=428, description='w:', layout=widgets.Layout(width='150px'))
coord_h = widgets.IntText(value=128, description='h:', layout=widgets.Layout(width='150px'))
coords_box = widgets.HBox([coord_x, coord_y, coord_w, coord_h], layout=widgets.Layout(description='Tọa độ cắt ảnh:'))

process_button = widgets.Button(description='3. Trích xuất & Điền thông tin', button_style='success', icon='cogs')
output_area = widgets.Output()

# --- Hàm xử lý chính ---
def process_images(b):
    with output_area:
        clear_output()

        # Bước 0: Cấu hình API và kiểm tra file
        try:
            genai.configure(api_key=api_key_input.value)
            model = genai.GenerativeModel("models/gemini-2.0-flash")
        except Exception as e:
            print(f"❌ Lỗi API Key: Vui lòng kiểm tra lại. Chi tiết: {e}")
            return

        if not uploader_id.value or not uploader_contract.value:
            print("⚠️ Vui lòng tải lên cả hai tệp.")
            return

        print("🔄 Bắt đầu xử lý...")
        
        # Lấy nội dung ảnh dưới dạng bytes
        id_content = next(iter(uploader_id.value.values()))['content']
        contract_content = next(iter(uploader_contract.value.values()))['content']
        
        # Chuyển đổi ảnh sang định dạng PIL để AI xử lý và numpy để cắt
        id_image_pil = Image.open(io.BytesIO(id_content))
        id_image_np = np.array(id_image_pil)
        contract_image = Image.open(io.BytesIO(contract_content))

        # Hiển thị hình ảnh đã tải lên
        print("\n--- Hình ảnh đã tải lên ---")
        display(widgets.HBox([widgets.Image(value=id_content, width=350), widgets.Image(value=contract_content, width=350)]))
        
        # === BƯỚC 1: Cắt ảnh thủ công theo tọa độ đã nhập ===
        print("\n✂️ Đang cắt ảnh theo tọa độ bạn cung cấp...")
        try:
            x, y, w, h = coord_x.value, coord_y.value, coord_w.value, coord_h.value
            
            # Cắt ảnh bằng numpy slicing
            cropped_np = id_image_np[y:y+h, x:x+w]
            
            # Chuyển lại sang định dạng PIL để hiển thị
            cropped_pil = Image.fromarray(cropped_np)
            
            print("✅ Cắt ảnh thành công!")
            
            # Chuyển ảnh đã cắt thành bytes để hiển thị
            byte_arr = io.BytesIO()
            cropped_pil.save(byte_arr, format='PNG')
            cropped_bytes = byte_arr.getvalue()

            display(widgets.VBox([
                widgets.HTML("<b>Ảnh đã cắt theo tọa độ:</b>"),
                widgets.Image(value=cropped_bytes)
            ]))
            
        except Exception as e:
            print(f"❌ Lỗi khi cắt ảnh: {e}. Vui lòng kiểm tra lại tọa độ.")

        # === BƯỚC 2: AI trích xuất thông tin chi tiết từ ảnh gốc ===
        try:
            print("\n📄 Đang đọc toàn bộ thông tin từ giấy tờ...")
            # Thay đổi prompt để yêu cầu các key cụ thể hơn
            prompt_full_details = """
            Hãy trích xuất tất cả các trường thông tin bạn thấy trên giấy tờ này và trả về dưới dạng một đối tượng JSON. 
            Sử dụng các key sau: "so_ho_chieu", "ho", "ten", "ngay_sinh", "gioi_tinh", "so_cmnd", "noi_sinh", "ngay_cap", "ngay_het_han", "co_quan_cap".
            """
            response_full_details = model.generate_content([prompt_full_details, id_image_pil])
            # Thêm bước làm sạch để xử lý lỗi JSON
            clean_text = response_full_details.text.strip().replace('```json', '').replace('```', '')
            full_details_data = json.loads(clean_text)
            
            print("\n" + "-"*15 + " THÔNG TIN CHI TIẾT TRÊN GIẤY TỜ " + "-"*15)
            for key, value in full_details_data.items():
                print(f"- {key.replace('_', ' ').title()}: {value}")
            print("-" * 55)

            # Lấy thông tin cần thiết cho hợp đồng
            ho_ten_full = f"{full_details_data.get('ho', '')} {full_details_data.get('ten', '')}".strip()
            id_data = {
                "ho_ten": ho_ten_full,
                "so_id": full_details_data.get('so_ho_chieu', 'N/A'),
                "ngay_sinh": full_details_data.get('ngay_sinh', 'N/A')
            }
            print(f"✅ Đã lấy thông tin cần thiết cho hợp đồng: {id_data.get('ho_ten')}")

            # Trích xuất văn bản từ hợp đồng
            prompt_contract = "Trích xuất toàn bộ nội dung văn bản từ hình ảnh hợp đồng này."
            response_contract = model.generate_content([prompt_contract, contract_image])
            contract_text = response_contract.text
            print("✅ Đã trích xuất văn bản hợp đồng.")

        except Exception as e:
            print(f"❌ Lỗi trong quá trình trích xuất của AI: {e}")
            return
            
        # === BƯỚC 3: Điền thông tin vào hợp đồng (ĐÃ CẬP NHẬT) ===
        print("\n✍️  Đang điền thông tin vào hợp đồng...")
        ho_ten, so_id, ngay_sinh = id_data.get("ho_ten"), id_data.get("so_id"), id_data.get("ngay_sinh")

        filled_contract_text = contract_text
        
        # Dùng regex để thay thế các trường trống trước
        filled_contract_text = re.sub(r'(Địa chỉ\s*:\s*)', r'\1(Không có trên giấy tờ)', filled_contract_text, flags=re.IGNORECASE)
        filled_contract_text = re.sub(r'(Điện thoại\s*:\s*)', r'\1(Không có trên giấy tờ)', filled_contract_text, flags=re.IGNORECASE)

        # Chèn tên đại diện vào trước
        filled_contract_text = re.sub(r'(Đại diện\s*:\s*)', rf'\1{ho_ten}', filled_contract_text, flags=re.IGNORECASE)

        # **Đây là phần logic quan trọng được thêm vào**
        # Nó tạo ra một khối văn bản chi tiết và thay thế tên vừa chèn bằng khối chi tiết này.
        if ho_ten and ho_ten in filled_contract_text:
            # Tạo khối thông tin chi tiết
            detailed_info = f"{ho_ten}\nSố hộ chiếu: {so_id}\nNgày sinh: {ngay_sinh}"
            # Thay thế tên đơn lẻ bằng khối thông tin chi tiết (chỉ thay thế lần xuất hiện đầu tiên)
            filled_contract_text = filled_contract_text.replace(ho_ten, detailed_info, 1)

        print("✅ Hoàn tất!")

        # === HIỂN THỊ KẾT QUẢ CUỐI CÙNG ===
        print("\n" + "="*50)
        print(" KẾT QUẢ HỢP ĐỒNG ĐÃ ĐƯỢC ĐIỀN TỰ ĐỘNG ")
        print("="*50 + "\n")
        print(filled_contract_text)


# --- Hiển thị giao diện và gán sự kiện ---
process_button.on_click(process_images)
upload_buttons = widgets.HBox([uploader_id, uploader_contract])
display(api_key_input, upload_buttons, widgets.HTML("<b>Nhập tọa độ để cắt ảnh từ Giấy tờ:</b>"), coords_box, process_button, output_area)
